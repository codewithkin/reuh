// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  occupation    String?
  plan          String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  notifications Notifications[]
  resumes       Resume[]
  headshots      Headshot[]
  coverLetters   CoverLetter[]
  interviewQuestions InterviewQuestion[]
  accounts      Account[]
  sessions      Session[]
}

model Resume {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  title       String?     // Made optional
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  template    String?     // Made optional
  personalInfo PersonalInformation?
  education    Education[]
  experience   WorkExperience[]
  skills       Skill[]
  certifications Certification[]
  references   Reference[]
  
  user        User        @relation(fields: [userId], references: [id])
}

model PersonalInformation {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  resumeId    String    @unique @db.ObjectId
  fullName    String    // Required
  email       String    // Required
  phone       String?
  address     String?
  country     String?
  city        String?
  summary     String?
  linkedin    String?
  website     String?
  
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Education {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  resumeId      String    @db.ObjectId
  institution   String?
  degree        String?
  fieldOfStudy  String?
  startDate     DateTime?
  endDate       DateTime?
  isOngoing     Boolean   @default(false)
  gpa           Float?
  description   String?
  location      String?
  
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  resumeId      String    @db.ObjectId
  company       String?
  position      String?
  location      String?
  startDate     DateTime?
  endDate       DateTime?
  isOngoing     Boolean   @default(false)
  description   String?
  technologies  String[]
  
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Skill {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  resumeId    String    @db.ObjectId
  name        String?
  category    String?
  proficiency Int?
  
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Certification {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  resumeId      String    @db.ObjectId
  name          String?
  issuingBody   String?
  issueDate     DateTime?
  expiryDate    DateTime?
  credentialId  String?
  url           String?
  
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Reference {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  resumeId    String    @db.ObjectId
  name        String?
  position    String?
  company     String?
  email       String?
  phone       String?
  relationship String?
  
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Notifications {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  message   String
  read      Boolean  @default(false)
  description String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
}

model Headshot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  imageUrl  String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
}

model CoverLetter {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  content        String
  companyName    String
  companyAddress String?
  position       String
  createdAt      DateTime @default(now())

  user           User     @relation(fields: [userId], references: [id])
}

model InterviewQuestion {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  question  String
  answer    String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}